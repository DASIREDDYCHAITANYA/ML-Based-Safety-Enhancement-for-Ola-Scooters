import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

from google.colab import drive
drive.mount('/content/drive')
file_path = '/content/drive/My Drive/mini/dataset.csv'
df = pd.read_csv(file_path)

input_columns = ['MOTOR_TYPE','BATTERY_CAPACITY','BATTERY_POWER','RANGE','ACCELERATION','LOAD_CAPACITY']  # Replace with your actual column names
output_column = 'PERFORMANCE_RATE'
#  Handle missing values (if any)
df = df.dropna(subset=input_columns + [output_column])

X = df[input_columns]
y = df[output_column]

#  Normalize the features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

#  Predict on the test set and evaluate the model
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

#  function to predict performance rate based on new inputs
def predict_performance(input_data):
    input_data = scaler.transform([input_data])
    prediction = model.predict(input_data)
    return prediction[0]
value1 = int(input("Enter MOTOR_TYPE: "))
value2 = int(input("Enter BATTERY_CAPACITY: "))
value3 = int(input("Enter BATTERY_POWER: "))
value4 = int(input("Enter RANGE: "))
value5 = int(input("Enter ACCELERATION: "))
value6 = int(input("Enter LOAD_CAPACITY: "))
new_input = [value1, value2, value3, value4, value5, value6]
performance_rate = predict_performance(new_input)
print(f'Predicted Performance Rate: {performance_rate}')
